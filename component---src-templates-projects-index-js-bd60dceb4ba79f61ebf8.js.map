{"version":3,"sources":["webpack:///./src/templates/projects/projects.module.scss","webpack:///./src/templates/projects/index.js"],"names":["module","exports","projectsQuery","AllProjects","data","pageContext","mdxEdges","allMdx","edges","fileEdges","allFile","currentPage","numPages","nodes","map","mdxEdge","mdxNode","node","slug","fields","fileNode","find","fileEdge","relativeDirectory","slice","className","styles","container","content","nav","to","title","project","key","id","image","fluid","childImageSharp","frontmatter","date","pagination","text","numbers","Array","from","length","_","i","pageNumber","active","rel"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,UAAY,oCAAoC,QAAU,kCAAkC,IAAM,8BAA8B,WAAa,qCAAqC,QAAU,kCAAkC,OAAS,iCAAiC,KAAO,iC,+8BCYjS,IA0FaC,EAAa,aA6CXC,UAvIK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAERC,EAEfF,EAFFG,OAAUC,MACQC,EAChBL,EADFM,QAAWF,MAGLG,EAA0BN,EAA1BM,YAAaC,EAAaP,EAAbO,SAGfC,EAAQP,EAASQ,KAAI,SAAAC,GAAY,IAE7BC,EAIJD,EAJFE,KAEYC,EAEVH,EAHFE,KACEE,OAAUD,KASAE,EANGX,EAAUY,MAAK,SAAAC,GAAa,IAEjCC,EACND,EADFL,KAAQM,kBAEV,OAAOL,EAAKM,MAAM,GAAI,KAAOD,KAEvBN,KAER,OAAO,EAAP,KAAYD,GAAYI,MAG1B,OACE,kBAAC,IAAD,KACE,yBAAKK,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,SACrB,yBAAKH,UAAWC,IAAOG,KACrB,kBAAC,OAAD,CAAMC,GAAG,KAAT,WAEF,4CACA,kBAAC,IAAD,CAAKC,MAAM,iBACX,4BACGlB,EAAMC,KAAI,SAAAkB,GAAO,OAChB,wBAAIC,IAAKD,EAAQE,IACf,kBAAC,OAAD,CAAMJ,GAAE,YAAcE,EAAQb,OAAOD,MACnC,yBAAKO,UAAWC,IAAOS,OACrB,kBAAC,IAAD,CAAKC,MAAOJ,EAAQK,gBAAgBD,SAEtC,4BAAKJ,EAAQM,YAAYP,OACzB,8BAAOC,EAAQM,YAAYC,aAMrC,yBAAKd,UAAWC,IAAOc,YACrB,0BAAMf,UAAWC,IAAOe,QACH,IAAhB9B,IACD,kBAAC,OAAD,CACEmB,GAAE,cAAenB,EAAc,GAAM,EAAI,GAAKA,EAAc,IAD9D,aAOJ,0BAAMc,UAAWC,IAAOgB,SACrBC,MAAMC,KAAK,CAAEC,OAAQjC,IAAY,SAACkC,EAAGC,GACpC,IAAMC,EAAaD,EAAI,EACvB,OACE,0BACEd,IAAKe,EACLvB,UAAWuB,IAAerC,EAAce,IAAOuB,OAAS,IAExC,IAAfD,EACC,kBAAC,OAAD,CAAMlB,GAAE,cAAR,KAEA,kBAAC,OAAD,CAAMA,GAAE,aAAekB,GAAeA,QAMhD,0BAAMvB,UAAWC,IAAOe,MACrB9B,IAAgBC,GACf,kBAAC,OAAD,CAAMkB,GAAE,cAAenB,EAAc,GAAKuC,IAAI,QAA9C","file":"component---src-templates-projects-index-js-bd60dceb4ba79f61ebf8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"projects-module--container--2nSDS\",\"content\":\"projects-module--content--1DKR-\",\"nav\":\"projects-module--nav--3MSET\",\"pagination\":\"projects-module--pagination--jbf2x\",\"numbers\":\"projects-module--numbers--2py6q\",\"active\":\"projects-module--active--3ihL6\",\"text\":\"projects-module--text--26ACf\"};","/**\n * Component to list all projects\n * Based on https://www.gatsbyjs.org/docs/adding-pagination/\n */\n\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport MainLayout from \"../../components/layout/main\"\nimport SEO from \"../../components/seo\"\nimport styles from \"./projects.module.scss\"\n\nconst AllProjects = ({ data, pageContext }) => {\n  const {\n    allMdx: { edges: mdxEdges },\n    allFile: { edges: fileEdges },\n  } = data\n\n  const { currentPage, numPages } = pageContext\n\n  // Combine image and Mdx nodes\n  const nodes = mdxEdges.map(mdxEdge => {\n    const {\n      node: mdxNode,\n      node: {\n        fields: { slug },\n      },\n    } = mdxEdge\n    const fileEdge = fileEdges.find(fileEdge => {\n      const {\n        node: { relativeDirectory },\n      } = fileEdge\n      return slug.slice(1, -1) === relativeDirectory\n    })\n    const { node: fileNode } = fileEdge\n\n    return { ...mdxNode, ...fileNode }\n  })\n\n  return (\n    <MainLayout>\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.nav}>\n            <Link to=\"/\">&larr; Home</Link>\n          </div>\n          <h1>All Projects</h1>\n          <SEO title=\"All Projects\" />\n          <ul>\n            {nodes.map(project => (\n              <li key={project.id}>\n                <Link to={`/projects${project.fields.slug}`}>\n                  <div className={styles.image}>\n                    <Img fluid={project.childImageSharp.fluid} />\n                  </div>\n                  <h4>{project.frontmatter.title}</h4>\n                  <span>{project.frontmatter.date}</span>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className={styles.pagination}>\n          <span className={styles.text}>\n            {!(currentPage === 1) && (\n              <Link\n                to={`/projects/${currentPage - 1 === 1 ? \"\" : currentPage - 1}`}\n              >\n                Previous\n              </Link>\n            )}\n          </span>\n          <span className={styles.numbers}>\n            {Array.from({ length: numPages }, (_, i) => {\n              const pageNumber = i + 1\n              return (\n                <span\n                  key={pageNumber}\n                  className={pageNumber === currentPage ? styles.active : \"\"}\n                >\n                  {pageNumber === 1 ? (\n                    <Link to={`/projects/`}>1</Link>\n                  ) : (\n                    <Link to={`/projects/${pageNumber}`}>{pageNumber}</Link>\n                  )}\n                </span>\n              )\n            })}\n          </span>\n          <span className={styles.text}>\n            {currentPage !== numPages && (\n              <Link to={`/projects/${currentPage + 1}`} rel=\"next\">\n                Next\n              </Link>\n            )}\n          </span>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const projectsQuery = graphql`\n  query projectsQuery($skip: Int!, $limit: Int!) {\n    allFile(\n      filter: {\n        sourceInstanceName: { eq: \"projects\" }\n        extension: { eq: \"png\" }\n        name: { eq: \"image\" }\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          relativeDirectory\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    allMdx(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default AllProjects\n"],"sourceRoot":""}