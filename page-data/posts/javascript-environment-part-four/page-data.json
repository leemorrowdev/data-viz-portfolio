{"componentChunkName":"component---src-templates-mdx-index-js","path":"/posts/javascript-environment-part-four/","result":{"data":{"mdx":{"id":"f688fc4f-8756-5d37-a42e-bd4faabedfed","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The JavaScript Environment Part Four - Browser Engines\",\n  \"date\": \"2020-08-11T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Link = makeShortcode(\"Link\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is part four of a five part series I\\u2019ve written to assist in my learning, and also to help anyone else out there facing similar struggles. Check out the other parts of this series:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-one\",\n    mdxType: \"Link\"\n  }, \"Overview\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-two\",\n    mdxType: \"Link\"\n  }, \"JavaScript engines\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-three\",\n    mdxType: \"Link\"\n  }, \"Closures\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Browser Engines\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-five\",\n    mdxType: \"Link\"\n  }, \"Asynchronous Operations\"))), mdx(\"h2\", null, \"Browser Engines\"), mdx(\"h3\", null, \"The Event Loop\"), mdx(\"p\", null, \"Once the initial loading phase of a JavaScript application is complete, the application enters the event handling phase. In this phase, the main logic and rendering of a JavaScript application runs on a single main thread in the browser engine. This main thread is known as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"event loop\"), \". \"), mdx(\"p\", null, \"The event loop essentially connects the UI to the JavaScript engine. When a task is queued on one of the JavaScript engine\\u2019s two task queues, the event loop will eventually collect the task from its queue. Once the previous task has completed, at which point the call stack will be empty, the event loop adds the task to the call stack to be executed. \"), mdx(\"p\", null, \"Remember, tasks in the event loop:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"are handled one at a time \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"always run to completion and cannot be interrupted\")), mdx(\"h4\", null, \"Loop Iteration\"), mdx(\"p\", null, \"In each loop iteration, the JavaScript engine will take the following actions:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If the macrotask queue is not empty, process one task\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If the microtask queue is not empty, process all tasks in the queue\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If a UI update is required, re-render\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Because the purpose of microtasks is to update the application state, all microtasks should be executed before the display is re-rendered. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microtasks can queue up other microtasks, all of which will continue to run with priority.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In order to take advantage of the microtask queue, you must use promises or async await when calling asynchronous functions. \")), mdx(\"h4\", null, \"UI Rendering\"), mdx(\"p\", null, \"The browser runs at a target frame rate of 60 frames per second; it should aim to re-render 60 times per second to achieve this goal. This means that, ideally, the browser re-renders every 16 ms. If we want to achieve this goal, it is important to avoid adding long running tasks to the event queue. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the event loop reaches the UI update check in under 16 ms, it may not re-render, as re-rendering is a complex and time consuming operation. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If executing one iteration of the event loop takes more than 16ms, it may not achieve the target frame rate. In many cases this may not be noticeable to the user, but if a task runs for more than a couple seconds, the browser will display an \\u201CUnresponsive Script\\u201D message. \")), mdx(\"h4\", null, \"Timers\"), mdx(\"p\", null, \"Timers are extremely useful in JavaScript, but their purpose is often misunderstood; timers are not actually useful for measuring precise intervals, but are extremely useful for breaking up long running tasks that prevent the UI from re-rendering. \"), mdx(\"h5\", null, \"Measuring intervals\"), mdx(\"p\", null, \"Timers are not useful for measuring precise intervals because they offer no guarantee of when a their callback will be executed. Once a timer fires, it adds its callback to the macrotask queue. If there are a number of macrotasks and microtasks already in queue, however, its callback may not actually be executed until well after.\"), mdx(\"h5\", null, \"Breaking up code\"), mdx(\"p\", null, \"Because only one task in the macrotask queue is executed per iteration of the event loop, dividing up a given macrotask into multiple macrotasks provides the UI with more opportunities to re-render.\"), mdx(\"p\", null, \"The most common way of accomplishing this is to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout(callback, 0)\"), \" on a given callback function. \"), mdx(\"p\", null, \"An iterative case study of a long running task:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const count = 20000;\\nconst subTasks = 4;\\nconst chunkSize = count / subTasks;\\nlet iteration = 0;\\nsetInterval(function runTask(){\\n const baseCount = chunkSize * iteration; // compute where to start\\n for(let i = 0; i < chunkSize; i++){\\n let currCount = baseCount + 1;\\n // do stuff\\n }\\n iteration++;\\n if(iteration < subTasks){\\n   setTimeOut(runTask, 0);\\n }\\n}, 0);\\n\")), mdx(\"h5\", null, \"Timer APIs\"), mdx(\"p\", null, \"There are two timer APIs in the HTML 5 standards:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setTimeout();\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id = setTimeout(callback, delay);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"clearTimeout(id);\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setInterval();\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id = setInterval(callback, delay);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"clearInterval(id);\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the case of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setInterval()\"), \", the JavaScript engine will not queue more than one instance of a specific interval handler at a time. As a result, if a previous callback from a given interval is still in the macrotask queue and has not been executed, a new one will not be added to the macrotask queue. \")), mdx(\"h3\", null, \"Asynchronous Operations\"), mdx(\"p\", null, \"A full list of the Web APIs browsers provide, as well as documentation of their corresponding JavaScript function calls can be found on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API\"\n  }), \"mozilla developer network\"), \". \"), mdx(\"h3\", null, \"The Browser Object Model\"), mdx(\"p\", null, \"Browser engines also manage the Browser Object Model (BOM), which maintains the current state of the browser and all running applications. At its root, the BOM consists of an object known as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window\"), \" object, which has the following children:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"navigator\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"history\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"screen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"location\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"document\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Though the BOM is not standardized, all modern browsers support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window\"), \" object by convention.\"), mdx(\"h4\", null, \"Well Known Browser Web APIs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The DOM API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"XMLHttpRequest\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fetch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setTimeout\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setInterval\"))), mdx(\"h4\", null, \"Popular Browsers and their Engines\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chromium / Google Chrome: previously WebKit, now Blink\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microsoft Edge: previously EdgeHTML, now Blink\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mozilla Firefox: Gecko\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Safari: WebKit\")));\n}\n;\nMDXContent.isMDXComponent = true;","fileAbsolutePath":"/home/lee/projects/gatsby/data-viz-portfolio/src/content/posts/javascript-environment-part-four.mdx","frontmatter":{"title":"The JavaScript Environment Part Four - Browser Engines","date":"August 11, 2020"}}},"pageContext":{"id":"f688fc4f-8756-5d37-a42e-bd4faabedfed"}}}