{"componentChunkName":"component---src-templates-mdx-index-js","path":"/posts/javascript-environment-part-two/","result":{"data":{"mdx":{"id":"53f25f2f-80ab-53a4-ab23-e4a6c51c2742","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The JavaScript Environment Part Two - JavaScript Engines\",\n  \"date\": \"2020-08-11T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Sections\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./README.md\"\n  }), \"Overview\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"JavaScript Engines\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./closures.md\"\n  }), \"Closures\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./browser-engines.md\"\n  }), \"Browser Engines\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./async-operations.md\"\n  }), \"Asynchronous Operations\"))), mdx(\"h2\", null, \"JavaScript Engines\"), mdx(\"p\", null, \"JavaScript engines consist of four main components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The heap, or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global memory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lexical environments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execution contexts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The execution context stack, or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"call stack\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Task queues\")), mdx(\"h3\", null, \"The Heap\"), mdx(\"p\", null, \"The heap contains references to all function declarations and variables. It is more commonly referred to as global memory. \"), mdx(\"h3\", null, \"Lexical Environments\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-lexical-environments\"\n  }), \"Lexical environments\"), \" are essentially the internal implementation of scopes, as they are always associated with syntactic structures such as function declarations and block statements. More specifically, they are used in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"identifier resolution\"), \", the process of mapping (registering) identifiers (variable or function names) to variables (memory locations). \"), mdx(\"p\", null, \"There are three subclasses of lexical environments to provide support for specialized environments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global environment:\"), \" Sets the outer lexical environment\\u2019s reference to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"function environment:\"), \" Provides \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" binding and provides support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"super\"), \" invocations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"module environment:\"), \" Provides bindings for the top level declarations and imports in modules\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Double bracket notation is used to refer to an internal property that cannot be accessed. \"), mdx(\"p\", null, \"Each lexical environment contains:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An internal \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[Environmental Record]]\"), \" property that records all identifier bindings in the environment. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A reference to the Environmental Record of the current environment\\u2019s outer environment. \")), mdx(\"p\", null, \"Environmental Records are necessary because the JavaScript engine must be able to access identifiers declared outside the current environment during identifier resolution. If an identifier is not found in the current environment, the outer environment must be searched through the current environment\\u2019s internal reference to it. \"), mdx(\"p\", null, \"There are two primary Environmental Record types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"declarative Environmental Records:\"), \" Used to bind identifiers of variables and functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"object Environmental Records:\"), \" Used to bind identifiers of object properties\")), mdx(\"p\", null, \"In addition, there are three specialized Environmental Record types to provide support for the three specialized lexical environment subclasses:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global Environmental Records:\"), \" provides binding for built-in globals, properties of the global object, and all top-level declarations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"function Environmental Records:\"), \" A subclass of declarative Environmental Records that provides \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" binding and contains the state used for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"super\"), \" invocations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"module Environmental Records:\"), \" A subclass of declarative Environmental Records that provides bindings for the top level declarations and imports in modules\")), mdx(\"h3\", null, \"Execution Contexts\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-execution-contexts\"\n  }), \"Execution contexts\"), \" are used with the call stack to track application execution. \"), mdx(\"p\", null, \"There are two types of code in JavaScript: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"global code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function code\")), mdx(\"p\", null, \"There also two types of execution contexts, or the contexts code is executed in:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"global execution context: The execution context for all global code. There is only one global execution context per JavaScript program. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function execution context: The execution contexts created in the global execution context on each function invocation. \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In the case of web browsers, there is one global execution context per web page. \"), mdx(\"p\", null, \"Execution contexts are also used in identifier resolution, because each execution context contains two associated lexical environments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LexicalEnvironment: contains all identifier bindings for function declarations, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"VariableEnvironment: contains all identifier bindings for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"))), mdx(\"h3\", null, \"The Execution Context Stack\"), mdx(\"p\", null, \"When a function is invoked, the current execution context must be stopped and a new execution context must be created. Once this execution context has completed, it is discarded and the original execution context resumes where it left off. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ecma-international.org/ecma-262/#execution-context-stack\"\n  }), \"execution context stack\"), \" tracks these execution contexts to ensure application execution pauses and resumes correctly when functions are invoked or return. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" There is only one execution context stack due to the single threaded execution model in JavaScript applications. \"), mdx(\"p\", null, \"The execution context stack is more commonly referred to as the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"call stack\"), \". \"), mdx(\"h3\", null, \"Macrotask and Microtask Queues\"), mdx(\"p\", null, \"The components of JavaScript engines up to this point only account for synchronous behavior, but asynchronous operations return callback functions with their own function execution contexts. JavaScript engines must collect and handle the order that these callbacks are added to the call stack. \"), mdx(\"p\", null, \"To handle this, by ECMA Standards, JavaScript engines must maintain at least two task queues:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Macrotasks:\"), \" Used for executing large tasks like global JavaScript code, as well as low priority asynchronous operations like IO events and some API callbacks\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"examples: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setTimeout()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setInterval()\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Microtasks:\"), \" Used for executing smaller tasks that update the application state like callbacks in promises. Microtasks execute as soon as possible, before UI re-renders\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"examples: Promise callbacks\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In ECMAScript standards these are referred to has the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-jobs-and-job-queues\"\n  }), \"ScriptJobs and PromiseJobs\"), \" queues, respectively. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microtasks and Macrotasks queues are only the minimum required queues. Many JavaScript engines have even more queues divided up for specific types of macrotasks and microtasks.\")), mdx(\"h3\", null, \"JavaScript Execution\"), mdx(\"p\", null, \"JavaScript is an interpreted language; to match ECMAScript standards, its execution must run line by line. Some JavaScript engines may use hybrid optimization techniques such as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Just In Time\"), \" (JIT) compilation, an optimization technique that involved compiling each line of JavaScript to machine code the moment before execution, but still, it is inherently an interpreted language. \"), mdx(\"p\", null, \"This is because JavaScript execution must take place in two phases, as opposed to immediately executing as in a compiled language:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The identifier resolution phase\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The execution phase\")), mdx(\"h4\", null, \"The Identifier Resolution Phase\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Recall:\"), \" Identifier resolution is the process of mapping (registering) identifiers (variable or function names) to variables (memory locations). \"), mdx(\"p\", null, \"The identifier resolution process takes place every time a new lexical environment is created. In this phase, the JavaScript engine registers all declared functions and identifiers. \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create the Lexical Environment\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If the environment is a function or global environment:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scan the environment for function declarations:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register the identifiers of function declarations that are outside other functions, and define their corresponding functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an identifier already exists in the outer environment, overwrite it\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Scan the environment for variable declarations:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the environment is a block environment:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register identifiers of variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \" in the current block, but do not initialize them\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an identifier already exists in the outer environment, overwrite it\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the environment is a function or global environment:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register the identifiers of variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), \" outside other functions, and initialize them as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an identifier already exists in the current environment, overwrite it\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register the identifiers of variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \" outside blocks, but do not initialize them\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an identifier already exists in the current environment, throw a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SyntaxError\"), \", as variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \" cannot be re-declared\")))))))), mdx(\"h5\", null, \"Variable Declarations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \": \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cannot be re-declared\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cannot be reassigned\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be modified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"must be initialized on definition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"block, loop, function, or global scope\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \": \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cannot be re-declared\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be reassigned\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be modified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"block, loop, function, or global scope\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), \": \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be re-declared\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be reassigned\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be modified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function or global scope\")))), mdx(\"h5\", null, \"A Note on \\u201CUndeclared Variables\\u201D\"), mdx(\"p\", null, \"\\u201CUndeclared Variables\\u201D, as they are often called, are variables that appear to have been registered without any variable declaration:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo = null\")), mdx(\"p\", null, \"These variables are actually properties of the global object, which is defined by the global Environmental Record. As such, they are treated as object properties by the JavaScript engine. \"), mdx(\"h4\", null, \"The Execution Phase\"), mdx(\"p\", null, \"The execution phase begins only once the identifier resolution phase is complete, and consists of the actual line by line execution of JavaScript code. \"), mdx(\"h4\", null, \"Effects of the JavaScript Execution Model\"), mdx(\"h5\", null, \"Hoisting\"), mdx(\"p\", null, \"The identifier resolution phase registers variables and function declarations before the execution phase. This is often referred to as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hoisting\"), \", because it is as if the declarations are being hoisted to the top of the environment before execution. \"), mdx(\"p\", null, \"As a result, variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" and function declarations can be accessed before their declarations because functions are defined on registration, and variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" are initialized as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" on their registration. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"console.log(foo); // logs the function\\nconsole.log(bar); // logs undefined\\n\\nfunction foo() {};\\nvar bar = null;\\n\")), mdx(\"p\", null, \"In this example, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar\"), \" can be accessed before their declaration. \"), mdx(\"p\", null, \"Variables \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \", however, behave differently. Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \", they are never initialized as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" on registration; but rather are let uninitialized until the execution phase. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"console.log(foo); // logs the function\\nconsole.log(bar); // throws a reference error\\n\\nfunction foo() {};\\nlet bar = null;\\n\")), mdx(\"p\", null, \"Unlike the previous example, this example will throw a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReferenceError\"), \" because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar\"), \" is accessed before its initialization. \"), mdx(\"p\", null, \"ECMAScript standards explicitly state \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-let-and-const-declarations\"\n  }), \"let and const\"), \" \\u201Cmay not be accessed in any way until the variable\\u2019s LexicalBinding is evaluated.\\u201D\"), mdx(\"p\", null, \"This restriction results in a zone between the declaration of variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" and the top of the environment which is known as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Temporal Dead Zone\"), \" (TDZ). \"), mdx(\"p\", null, \"The TDZ exists to ensure variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" cannot be mutated as variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" can, because this would violate their entire purpose. Variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" only have the TDZ for consistency, as both are block scoped. \"), mdx(\"h5\", null, \"Overriding Function Declarations\"), mdx(\"p\", null, \"Variables declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" are only initialized as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" in step three of the identifier resolution process if they have not been encountered in the environment. If a variable is declared with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" but has the same identifier as a function declaration, the variable will already have been encountered because function declarations are registered before variables in step two of the identifier resolution process. As a result, the variable will not be initialized as undefined; instead, it will retain its value, the function, until the variable is re-initialized. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"console.log(foo); // logs the function\\nvar foo = null;\\nfunction foo(){}\\nconsole.log(foo); // logs null\\n\")), mdx(\"p\", null, \"In this example, the identifier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" is registered and assigned a reference to a function declaration in step two of the identifier resolution process. In step three, it is not set to undefined because the identifier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" already exists in the environment; instead, it is left with the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" assigned as its reference until it is re-initialized by the var declaration. This reassignment causes the function declaration\\u2019s reference to be lost, and thus overridden. \"), mdx(\"p\", null, \"This same behavior can be accomplished by simply re-initializing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"console.log(foo); // logs the function\\nfoo = null;\\nfunction foo(){}\\nconsole.log(foo); // logs null\\n\")), mdx(\"p\", null, \"But not by simply re-declaring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \": \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"console.log(foo); // logs the function\\nvar foo;\\nfunction foo(){}\\nconsole.log(foo); // logs the function\\n\")), mdx(\"p\", null, \"Because the identifier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" is never re-initialized, it retains its reference to the function declaration and is not overridden. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Function declarations can only be overridden with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" or by simply re-initializing the identifier. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" will result in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SyntaxError\"), \" because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" cannot be re-declared from any other variable. \"), mdx(\"h3\", null, \"Popular Browsers and their JavaScript Engines\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chromium / Google Chrome: V8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microsoft Edge: V8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mozilla Firefox: SpiderMonkey\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Safari: Nitro\")));\n}\n;\nMDXContent.isMDXComponent = true;","fileAbsolutePath":"/home/lee/projects/gatsby/data-viz-portfolio/src/content/posts/javascript-environment-part-two.mdx","frontmatter":{"title":"The JavaScript Environment Part Two - JavaScript Engines","date":"August 11, 2020"}}},"pageContext":{"id":"53f25f2f-80ab-53a4-ab23-e4a6c51c2742"}}}