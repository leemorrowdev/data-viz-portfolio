{"componentChunkName":"component---src-templates-mdx-index-js","path":"/posts/javascript-environment-part-two/","result":{"data":{"mdx":{"id":"53f25f2f-80ab-53a4-ab23-e4a6c51c2742","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The JavaScript Environment Part Two - JavaScript Engines\",\n  \"description\": \"In this part I will go through the main components in JavaScript engines: the heap, or global memory, lexical environments, execution contexts...\",\n  \"date\": \"2020-08-09T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Link = makeShortcode(\"Link\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is part two of a six part series I\\u2019ve written to assist in my learning, and also to help anyone else out there facing similar struggles.\\nCheck out the other parts of this series:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-one\",\n    mdxType: \"Link\"\n  }, \"Overview\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"JavaScript Engines\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-three\",\n    mdxType: \"Link\"\n  }, \"Browser Engines\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-four\",\n    mdxType: \"Link\"\n  }, \"JavaScript Execution\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-five\",\n    mdxType: \"Link\"\n  }, \"Closures\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-six\",\n    mdxType: \"Link\"\n  }, \"Asynchronous Operations\"))), mdx(\"h2\", {\n    \"id\": \"javascript-engines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#javascript-engines\",\n    \"aria-label\": \"javascript engines permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"JavaScript Engines\"), mdx(\"p\", null, \"In this part I will go through the main components in JavaScript engines: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The heap, or global memory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lexical environments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execution contexts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The execution context stack, or call stack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The macrotask and microtask queues\")), mdx(\"h3\", {\n    \"id\": \"the-heap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-heap\",\n    \"aria-label\": \"the heap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The Heap\"), mdx(\"p\", null, \"The heap contains references to all function declarations and variables. It is more commonly referred to as global memory. \"), mdx(\"h3\", {\n    \"id\": \"lexical-environments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#lexical-environments\",\n    \"aria-label\": \"lexical environments permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Lexical Environments\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-lexical-environments\"\n  }, \"Lexical environments\"), \" are basically JavaScript\\u2019s internal implementation of scopes.\\nThey are each associated with a syntactic structure, for example a function declaration or a block statement, and are used for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"identifier resolution\"), \" in that structure.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identifier resultion: the process of mapping (registering) identifiers (variable or function names) to variables (memory locations).\")), mdx(\"p\", null, \"It\\u2019s worth noting that there are three additional lexical environments subclasses that provide support for environments that require unique attributes or additional functionality:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global environments:\"), \" Sets the outer lexical environment\\u2019s reference to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"function environments:\"), \" Provides \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" binding and provides support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"super\"), \" invocations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"module environments:\"), \" Provides bindings for the top level declarations and imports in modules\")), mdx(\"p\", null, \"Each lexical environment contains:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An internal \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[Environmental Record]]\"), \" property that records all identifier bindings in the environment. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A reference to the Environmental Record of the current environment\\u2019s outer environment.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Double bracket notation is used to refer to an internal property that cannot be accessed.\"), mdx(\"p\", null, \"Environmental Records are necessary because the JavaScript engine must be able to access identifiers declared outside the current environment during identifier resolution.\\nIf an identifier is not found in the current environment, the outer environment must be searched through the current environment\\u2019s internal reference to it. \"), mdx(\"p\", null, \"There are two primary Environmental Record types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"declarative Environmental Records:\"), \" Used to bind identifiers of variables and functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"object Environmental Records:\"), \" Used to bind identifiers of object properties\")), mdx(\"p\", null, \"There are also three Environmental Record subtypes used in the subclasses I mentioned earlier.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"global Environmental Records:\"), \" Provides binding for built-in globals, properties of the global object, and all top-level declarations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"function Environmental Records:\"), \" A subclass of declarative Environmental Records that provides \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" binding and contains the state used for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"super\"), \" invocations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"module Environmental Records:\"), \" A subclass of declarative Environmental Records that provides bindings for the top level declarations and imports in modules\")), mdx(\"h3\", {\n    \"id\": \"execution-contexts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#execution-contexts\",\n    \"aria-label\": \"execution contexts permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Execution Contexts\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-execution-contexts\"\n  }, \"Execution contexts\"), \" are used with the execution context stack to track the applications execution.\\nThe execution context stack is more commonly referred to as the call stack,\\nbut I\\u2019m being technical here so I\\u2019m going to continue calling it the execution context stack for this series.\"), mdx(\"p\", null, \"Even in ES2015, there are two base types of JavaScript code: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"global code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function code\")), mdx(\"p\", null, \"There also two types of execution contexts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"global execution context: The execution context for all global code. There is only one global execution context in each JavaScript program. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function execution context: The execution contexts created in the global execution context on each function invocation. \")), mdx(\"p\", null, \"Execution contexts are also used in identifier resolution, because each execution context contains two associated lexical environments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LexicalEnvironment: contains all identifier bindings for function declarations, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"VariableEnvironment: contains all identifier bindings for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" This is why people sometimes say the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" keyword represents the environments \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \".\"), mdx(\"h3\", {\n    \"id\": \"the-execution-context-stack\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-execution-context-stack\",\n    \"aria-label\": \"the execution context stack permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The Execution Context Stack\"), mdx(\"p\", null, \"Once again, this is more commonly referred to as the call stack. I\\u2019m just being technical. So if it easier for you to follow along,\\njust replace execution context stack with call stack in your mind.\"), mdx(\"p\", null, \"When a function is invoked, the current execution context must be stopped and a new execution context must be created.\\nOnce this execution context has completed, it is discarded and the original execution context resumes where it left off.\\nThe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ecma-international.org/ecma-262/#execution-context-stack\"\n  }, \"execution context stack\"), \"\\ntracks these execution contexts to ensure application execution pauses and resumes correctly when functions are invoked or return. \"), mdx(\"h3\", {\n    \"id\": \"the-macrotask-and-microtask-queues\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-macrotask-and-microtask-queues\",\n    \"aria-label\": \"the macrotask and microtask queues permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The Macrotask and Microtask Queues\"), mdx(\"p\", null, \"The components of JavaScript engines I\\u2019ve covered so far only account for synchronous behavior,\\nbut asynchronous operations return callback functions with their own function execution contexts.\\nJavaScript engines must maintain the order these callbacks arrive so that they can eventually be added to the execution context stack. \"), mdx(\"p\", null, \"To handle this, JavaScript engines must maintain two task queues:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Macrotasks:\"), \" Used for executing large tasks like global JavaScript code, as well as low priority asynchronous operations like IO events and some API callbacks\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"examples: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setTimeout()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setInterval()\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Microtasks:\"), \" Used for executing smaller tasks that update the application state like callbacks in promises. Microtasks execute as soon as possible,\\nbefore the UI re-renders\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"examples: Promise callbacks\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In the ECMAScript standards these queues are referred to has the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ecma-international.org/ecma-262/#sec-jobs-and-job-queues\"\n  }, \"ScriptJobs and PromiseJobs\"), \" queues.\"), mdx(\"h2\", {\n    \"id\": \"popular-browsers-and-their-javascript-engines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#popular-browsers-and-their-javascript-engines\",\n    \"aria-label\": \"popular browsers and their javascript engines permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Popular Browsers and their JavaScript Engines\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chromium / Google Chrome: V8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microsoft Edge: V8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mozilla Firefox: SpiderMonkey\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Safari: Nitro\")));\n}\n;\nMDXContent.isMDXComponent = true;","fileAbsolutePath":"/home/lee/projects/gatsby/data-viz-portfolio/src/content/posts/javascript-environment-part-two.mdx","frontmatter":{"title":"The JavaScript Environment Part Two - JavaScript Engines","description":"In this part I will go through the main components in JavaScript engines: the heap, or global memory, lexical environments, execution contexts...","date":"August 09, 2020"}}},"pageContext":{"id":"53f25f2f-80ab-53a4-ab23-e4a6c51c2742"}},"staticQueryHashes":["2865337466","63159454"]}