{"componentChunkName":"component---src-components-mdx-layout-index-js","path":"/posts/javascript-environment-part-one/","result":{"data":{"mdx":{"id":"210169ed-4335-50d5-b187-6f3d76bd75e6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The JavaScript Environment Part One - Overview\",\n  \"description\": \"When I first started learning JavaScript I often found myself frustrated, struggling to comprehend concepts that just didn't make sense on their own.\",\n  \"date\": \"2020-08-08T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Link = makeShortcode(\"Link\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is part one of a six part series I\\u2019ve written to assist in my learning, and also to help anyone else out there facing similar struggles.\\nCheck out the other parts of this series:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Overview\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-two\",\n    mdxType: \"Link\"\n  }, \"JavaScript Engines\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-three\",\n    mdxType: \"Link\"\n  }, \"Browser Engines\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-four\",\n    mdxType: \"Link\"\n  }, \"JavaScript Execution\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-five\",\n    mdxType: \"Link\"\n  }, \"Closures\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(Link, {\n    to: \"/posts/javascript-environment-part-six\",\n    mdxType: \"Link\"\n  }, \"Asynchronous Operations\"))), mdx(\"p\", null, \"When I first started learning JavaScript I often found myself frustrated,\\nstruggling to comprehend concepts that just didn\\u2019t make sense on their own.\\nOne moment I would read that JavaScript is single threaded, the next I\\u2019d find myself learning about asynchronous code, callbacks, promises, and async and await.\"), mdx(\"p\", null, \"The more I studied, the more seemingly contradictory or just downright confusing concepts I discovered.\"), mdx(\"p\", null, \"After all this frustration, I finally decided to learn how JavaScript works to get to the bottom of it. \"), mdx(\"p\", null, \"Understanding the environment JavaScript code is executed in is absolutely critical to understanding how the language itself works, hence the title of this series.\\nIn this first part I will give a broad overview of the parts of a JavaScript environment, which will function as an outline of sorts for future parts in the series.\"), mdx(\"h2\", {\n    \"id\": \"engines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#engines\",\n    \"aria-label\": \"engines permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Engines\"), mdx(\"p\", null, \"JavaScript environments are made up of two main engines:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a JavaScript engine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a platform engine\")), mdx(\"h3\", {\n    \"id\": \"javascript-engines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#javascript-engines\",\n    \"aria-label\": \"javascript engines permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"JavaScript Engines\"), mdx(\"p\", null, \"JavaScript engines manage the execution of JavaScript code on the application\\u2019s main thread.\\nAll JavaScript engines implement the features required by the European Computer Manufacturers Association (ECMA)\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ecma-international.org/publications/standards/Ecma-262.htm\"\n  }, \"ECMA-262 standards\"), \",\\notherwise known as the ECMAScript standards. These standards are written by the ECMA\\u2019s Technical Committee 39, or TC39. TC39 produces new standards annually in July. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" A scripting language is a programming language designed to work with a specific run-time environment.\\nIn this case, ECMAScript is the standard used for web scripting languages, and JavaScript is merely the most popular implementation of that standard. \"), mdx(\"h3\", {\n    \"id\": \"platform-engines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#platform-engines\",\n    \"aria-label\": \"platform engines permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Platform Engines\"), mdx(\"p\", null, \"Okay so just to prevent any confusion, as far as I\\u2019m aware I\\u2019m the only one using the term platform engine. Most of the time you\\u2019ll see the term browser engine because most JavaScript environments are in browsers.\\nBut what about Node and React Native, both of which have their own engines? That\\u2019s where platform engine comes from. It\\u2019s just a more general term.\"), mdx(\"p\", null, \"Anyways, platform engines manage how JavaScript applications interact with the device they are running on by providing applications with built in APIs to access device hardware or run libraries built into the environment itself.\"), mdx(\"p\", null, \"In browsers these APIs are known as Web APIs, and are standardized by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://html.spec.whatwg.org/\"\n  }, \"HTML5 standards\"), \".\\nMost other browser engine implementation details are not standardized, and are either similar purely by convention, or unique to the platform.\"), mdx(\"p\", null, \"Non-browser platform engines do not follow the HTML standards. They often support some browser APIs like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" and timers, but the exact APIs they implement is entirely dependent on the platform.\"), mdx(\"h2\", {\n    \"id\": \"operations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#operations\",\n    \"aria-label\": \"operations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Operations\"), mdx(\"p\", null, \"It turns out there is a good reason for JavaScript environments to contain two different engines.\\nIt\\u2019s because there are two types of operations that all JavaScript environments must support:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Synchronous operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Asynchronous operations\")), mdx(\"h3\", {\n    \"id\": \"synchronous-operations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#synchronous-operations\",\n    \"aria-label\": \"synchronous operations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Synchronous Operations\"), mdx(\"p\", null, \"Synchronous operations are run one at a time by the JavaScript engine on the single main thread of an application.\"), mdx(\"p\", null, \"JavaScript environments follow this single threaded execution model to prevent \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"race conditions\"), \". \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Race condition: when generating the correct output of an operation is dependent on the sequence of two or more other operations whose sequence cannot be guaranteed.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Examples:\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Main application logic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes to the UI\")), mdx(\"h3\", {\n    \"id\": \"asynchronous-operations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#asynchronous-operations\",\n    \"aria-label\": \"asynchronous operations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Asynchronous Operations\"), mdx(\"p\", null, \"Asynchronous operations are not run by the JavaScript engine; they are run by the platform engine on an entirely different thread.\\nThese operations run by being called by JavaScript functions, even though their actual logic is built into the platform engine in its native language.\\nIn the case of browser engines, these are the Web APIs I mentioned earlier, which are written in C++.\"), mdx(\"p\", null, \"Without asynchronous operations, long running tasks normally handled by APIs would have to run on the main thread in the JavaScript engine.\\nBut there is only one main thread that executes tasks one at a time, so this would constantly block the UI from re-rendering!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Timers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server operations\")), mdx(\"h2\", {\n    \"id\": \"whats-next\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#whats-next\",\n    \"aria-label\": \"whats next permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Whats Next?\"), mdx(\"p\", null, \"In the next two parts of this series I will go into detail about the design of each engine.\\nThen, I\\u2019ll discuss the two phases in JavaScript execution and some particularly challenging problems that arise from this two-stage execution model and its implementation.\\nFinally, I\\u2019ll explore two special topics that were particularly confusing to me before I learned about how JavaScript works: asynchronous code and closures.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fileAbsolutePath":"/home/lee/projects/gatsby/data-viz-portfolio/src/content/posts/javascript-environment-part-one.mdx","frontmatter":{"title":"The JavaScript Environment Part One - Overview","description":"When I first started learning JavaScript I often found myself frustrated, struggling to comprehend concepts that just didn't make sense on their own.","date":"August 08, 2020"}}},"pageContext":{"id":"210169ed-4335-50d5-b187-6f3d76bd75e6"}},"staticQueryHashes":["2865337466","63159454"]}